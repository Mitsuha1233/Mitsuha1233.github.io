{"meta":{"title":"Mitsuha","subtitle":null,"description":"好少年光芒万丈","author":"Mitsuha","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-02-14T09:11:23.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-02-14T09:11:23.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-02-14T09:11:23.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-02-14T09:11:23.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"任意控制LED行列","slug":"12LED","date":"2020-06-22T04:49:27.000Z","updated":"2020-06-22T14:56:22.809Z","comments":true,"path":"2020/06/22/12LED/","link":"","permalink":"/2020/06/22/12LED/","excerpt":"","text":"代码如下：&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE = &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE = &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE = &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; // 特性 UUIDs ACCELEROMETER_DATA = &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE = &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING = &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEM_TEMPERATURE = &#39;e95d1b25-251d-470a-a062-fa1922dfa9a8&#39;; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 { console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else { selected_device.gatt.disconnect(); } } function onDisconnected()//连接 { console.log(&quot;onDisconnected&quot;); resetUI(); } //function input.temperature(): number; function discoverDevices()// 搜索设备函数 { console.log(&quot;discoverDevices&quot;); var options = {acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 } //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; { console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); }) .catch(error =&gt; { alert(&#39;ERROR&#39; +error); console.log(&#39;ERROR&#39; +error); }); } function connect() //连接函数 { console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) { console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); }, function (error) { console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); } ); } function setConnectedStatus(status)//设置连接状态 { connected=status; document.getElementById(&#39;status_connected&#39;).innerHTML = status; if(status==true) { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Disconnect&quot;; } else { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Discover Devices&quot;; } } function setDiscoveryStatus(status)//设置发现状态 { services_discovered=status; document.getElementById(&#39;status_discovered&#39;).innerHTML=status; } function resetUI() //重置页面 { setConnectedStatus(false); } function discoverSvcsAndChars() //发现服务和特性 { console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; { has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; { if (service.uuid == ACCELEROMETER_SERVICE) { has_accelerometer_service = true; } if (service.uuid == LED_SERVICE) { has_led_service = true; } if (service.uuid == DEVICE_INFORMATION_SERVICE) { has_device_information_service = true; } if (service.uuid == TEMPERATURE_SERVICE) //温度 { has_temperature_service = true; } console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; { console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; { characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; has_accelerometer_data = true; } if (characteristic.uuid == LED_MATRIX_STATE) { led_matrix_state = characteristic; has_led_matrix_state = true; } if (characteristic.uuid == MODEL_NUMBER_STRING) { model_number_string = characteristic; has_model_name_string = true; } if(characteristic.uuid == TEM_TEMPERATURE) //温度 { tem_temperature = characteristic; has_tem_temperature = true; } if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); } }); }); }); }); } var i=0,j=0; function randomLEDs(ct) //控制led { console.log(&quot;randomLEDs&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_led_service) { alert(&quot;Error: The connected device does not contain the LED service&quot;); return; } if (!has_led_matrix_state) { alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; } var led_array=[]; if(ct==0) { led_array[0] = 1&lt;&lt;i; led_array[1] = 1&lt;&lt;i; led_array[2] = 1&lt;&lt;i; led_array[3] = 1&lt;&lt;i; led_array[4] = 1&lt;&lt;i; i++; if(i==5)i=0; } else if(ct==1) { led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; led_array[j] = 31; j++; if(j==5)j=0; } // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /*led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;*/ /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; { console.log(&#39;LED matrix state changed&#39;); }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } function readModelNumber() // 蓝牙信息服务 { console.log(&quot;readModelNumber&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_device_information_service) { alert(&quot;Error: The connected device does not contain the device information service&quot;); return; } if (!has_model_name_string) { alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; } model_number_string.readValue() .then(value =&gt; { data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } function accelerometer() //加速度传感器 { console.log(&quot;accelerometer&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_accelerometer_service) { alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; } if (!has_accelerometer_data) { alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;); return; } accelerometer_data.readValue() .then(value =&gt; { buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(&quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;ac_data&quot;).innerHTML = &quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;,Z=&quot; + Z; }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs(0)&quot;&gt;控制led行&lt;/button&gt; &lt;button id=&quot;btu_write&quot; onclick=&quot;randomLEDs(1)&quot;&gt;控制led列&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;h3&gt;accelerometer_data&lt;/h3&gt; &lt;button id=&quot;btn_readAC&quot; onclick=&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;/button&gt; &lt;div id=&quot;ac_data&quot;&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 需要用到如下函数 microbit.display.`on`() 调用on()以开启显示。 microbit.display.`off`() 调用off()以关闭显示（从而允许您将与显示相关的GPIO引脚重新用于其他目的）。 microbit.display.`is_on`() 若显示处于开启状态，则返回 True，否则返回 False。 网页显示 控制效果如下","categories":[],"tags":[],"keywords":[]},{"title":"加速度值显示","slug":"11加速度器值显示","date":"2020-06-22T03:49:27.000Z","updated":"2020-06-22T14:56:10.194Z","comments":true,"path":"2020/06/22/11加速度器值显示/","link":"","permalink":"/2020/06/22/11加速度器值显示/","excerpt":"","text":"添加如下代码：&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE = &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE = &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE = &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; // 特性 UUIDs ACCELEROMETER_DATA = &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE = &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING = &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEM_TEMPERATURE = &#39;e95d1b25-251d-470a-a062-fa1922dfa9a8&#39;; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 { console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else { selected_device.gatt.disconnect(); } } function onDisconnected()//连接 { console.log(&quot;onDisconnected&quot;); resetUI(); } //function input.temperature(): number; function discoverDevices()// 搜索设备函数 { console.log(&quot;discoverDevices&quot;); var options = {acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 } //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; { console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); }) .catch(error =&gt; { alert(&#39;ERROR&#39; +error); console.log(&#39;ERROR&#39; +error); }); } function connect() //连接函数 { console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) { console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); }, function (error) { console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); } ); } function setConnectedStatus(status)//设置连接状态 { connected=status; document.getElementById(&#39;status_connected&#39;).innerHTML = status; if(status==true) { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Disconnect&quot;; } else { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Discover Devices&quot;; } } function setDiscoveryStatus(status)//设置发现状态 { services_discovered=status; document.getElementById(&#39;status_discovered&#39;).innerHTML=status; } function resetUI() //重置页面 { setConnectedStatus(false); } function discoverSvcsAndChars() //发现服务和特性 { console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; { has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; { if (service.uuid == ACCELEROMETER_SERVICE) { has_accelerometer_service = true; } if (service.uuid == LED_SERVICE) { has_led_service = true; } if (service.uuid == DEVICE_INFORMATION_SERVICE) { has_device_information_service = true; } if (service.uuid == TEMPERATURE_SERVICE) //温度 { has_temperature_service = true; } console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; { console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; { characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; has_accelerometer_data = true; } if (characteristic.uuid == LED_MATRIX_STATE) { led_matrix_state = characteristic; has_led_matrix_state = true; } if (characteristic.uuid == MODEL_NUMBER_STRING) { model_number_string = characteristic; has_model_name_string = true; } if(characteristic.uuid == TEM_TEMPERATURE) //温度 { tem_temperature = characteristic; has_tem_temperature = true; } if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); } }); }); }); }); } var i=0; function randomLEDs() //控制led { console.log(&quot;randomLEDs&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_led_service) { alert(&quot;Error: The connected device does not contain the LED service&quot;); return; } if (!has_led_matrix_state) { alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; } var led_array=[]; if(i==0) { led_array[0] = 10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4; i++; } else { led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; i=0; } // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /*led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;*/ /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; { console.log(&#39;LED matrix state changed&#39;); }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } function readModelNumber() // 蓝牙信息服务 { console.log(&quot;readModelNumber&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_device_information_service) { alert(&quot;Error: The connected device does not contain the device information service&quot;); return; } if (!has_model_name_string) { alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; } model_number_string.readValue() .then(value =&gt; { data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } function accelerometer() //加速度传感器 { console.log(&quot;accelerometer&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_accelerometer_service) { alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; } if (!has_accelerometer_data) { alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;); return; } accelerometer_data.readValue() .then(value =&gt; { buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(&quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;ac_data&quot;).innerHTML = &quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;,Z=&quot; + Z; }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;h3&gt;accelerometer_data&lt;/h3&gt; &lt;button id=&quot;btn_readAC&quot; onclick=&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;/button&gt; &lt;div id=&quot;ac_data&quot;&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 需要用到如下函数 microbit.acceleromete.`get_x`() 测量 x 轴的加速度，根据方向变化，产生对应的正整数或负整数。 microbit.acceleromete.`get_y`() 测量 y 轴的加速度，根据方向变化，产生对应的正整数或负整数。 microbit.acceleromete.`get_z`() 测量 z 轴的加速度，根据方向变化，产生对应的正整数或负整数。 microbit.acceleromete.`get_values`() 同时测量所有轴的加速度，产生三元有序（X, Y, Z）整数组。 microbit.acceleromete.`current_gesture`() 返回当前手势的名称。 有了加速度器就可以在网页上读取BBC板子的XYZ值这里给大家特意说明下，陀螺仪只能测xyz三个轴的旋转量，不能测出位移量。 效果图如下","categories":[],"tags":[],"keywords":[]},{"title":"读写特性","slug":"10读写特性","date":"2020-06-21T05:49:27.000Z","updated":"2020-06-21T12:43:29.180Z","comments":true,"path":"2020/06/21/10读写特性/","link":"","permalink":"/2020/06/21/10读写特性/","excerpt":"","text":"如何读取BBC板的名称需要添加一个读数据的函数，函数如下 function readModelNumber() { console.log(&quot;readModelNumber&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_device_information_service) { alert(&quot;Error: The connected device does not contain the device information service&quot;); return; } if (!has_model_name_string) { alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; } model_number_string.readValue() .then(value =&gt; { data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } 添加按钮读取到BBC板子的信息 添加代码如下 &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model number&lt;/button&gt; 只要添加这两部分，就可以查看是否能读取到BBC板的名称，点击按钮后 点击按钮 若显示BBC micro:bit 则说明板子读取完毕 控制LED的亮灭!添加如下代码 function randomLEDs() //第6课上添加 { console.log(&quot;randomLEDs&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_led_service) { alert(&quot;Error: The connected device does not contain the LED service&quot;); return; } if (!has_led_matrix_state) { alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; } var led_array = [0, 0, 0, 0, 0]; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array[0] = Math.floor(Math.random() * 32); led_array[1] = 1; led_array[2] = 2; led_array[3] = 3; led_array[4] = 4; var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; { console.log(&#39;LED matrix state changed&#39;); }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } 添加按钮 &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; 连接板子 打开网页按新添按钮 若每按一次板子发生改变 说明成功","categories":[],"tags":[],"keywords":[]},{"title":"服务特性","slug":"8服务特性","date":"2020-06-19T03:49:27.000Z","updated":"2020-06-19T06:05:55.102Z","comments":true,"path":"2020/06/19/8服务特性/","link":"","permalink":"/2020/06/19/8服务特性/","excerpt":"","text":"添加如下代码： function discoverSvcsAndChars() //在第5课基础上添加的函数 { console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; { has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service=false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; { if (service.uuid == ACCELEROMETER_SERVICE) { has_accelerometer_service = true; } if (service.uuid == LED_SERVICE) { has_led_service = true; } if (service.uuid == DEVICE_INFORMATION_SERVICE) { has_device_information_service = true; } if (service.uuid == TEMPERATURE_SERVICE) //温度 { has_temperature_service = true; } console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics()//获取服务里所包含的特性 .then(characteristics =&gt; { console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; { characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; has_accelerometer_data = true; } if (characteristic.uuid == LED_MATRIX_STATE) { led_matrix_state = characteristic; has_led_matrix_state = true; } if (characteristic.uuid == MODEL_NUMBER_STRING) { model_number_string = characteristic; has_model_name_string = true; } if(characteristic.uuid == TEM_TEMPERATURE) //温度 { tem_temperature = characteristic; has_tem_temperature = true; } if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); } }); }); }); }); } 如下代码块为3个服务以及服务号、3个特性以及特性号： // service UUIDs ACCELEROMETER_SERVICE = &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE = &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE = &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE =&#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; // characteristic UUIDs ACCELEROMETER_DATA = &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE = &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING = &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEM_TEMPERATURE =&#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; 新增一个名为setDiscoveryStatus()的函数 function setDiscoveryStatus(status) { services_discovered=status; document.getElementById(&#39;status_discovered&#39;).innerHTML=status; } 这样我们就可以在浏览器中查看Led服务及它的任意两个特性。 查看特性打开谷歌浏览器 通过网页连接BBC后按F12健 就可以在弹出的界面中就能查看到服务特性 LED显示效果如下 添加温度服务https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluet 在如上网址中查找温度服务 按CTRL+F快捷键 查找temperature 就能显示相应的UUID 在代码中添加 var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_led_text=false //新加的led_text特性相关语句 var has_device_information_service = false; var has_model_name_string = false; // service UUIDs ACCELEROMETER_SERVICE = &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE = &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE = &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; // characteristic UUIDs ACCELEROMETER_DATA = &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE = &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; LED_TEXT=&#39;e95d93ee-251d-470a-a062-fa1922dfa9a8&#39; //新加的led_text特性相关语句 MODEL_NUMBER_STRING = &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; // cached characteristics var accelerometer_data; var led_matrix_state; var led_text; //新加的led_text特性相关语句 var model_number_string; var accelerometer_data; var options = {acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] //在第5节课上添加 } function discoverSvcsAndChars() //在第5课基础上添加的函数 { console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; { has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; { if (service.uuid == ACCELEROMETER_SERVICE) { has_accelerometer_service = true; } if (service.uuid == LED_SERVICE) { has_led_service = true; } if (service.uuid == DEVICE_INFORMATION_SERVICE) { has_device_information_service = true; } if (service.uuid == TEMPERATURE_SERVICE) //温度 { has_temperature_service = true; } console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; { console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; { characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; has_accelerometer_data = true; } if (characteristic.uuid == LED_MATRIX_STATE) { led_matrix_state = characteristic; has_led_matrix_state = true; } if (characteristic.uuid == LED_TEXT) //新加的led_text特性相关语句 { led_text = characteristic; has_led_text = true; } if (characteristic.uuid == MODEL_NUMBER_STRING) { model_number_string = characteristic; has_model_name_string = true; } if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); } }); }); }); }); } 添加好代码后打开浏览器测试发现温度服务特性是找不到的原因是BBC板子本身没添加温度特性需要在如下网址中添加温度服务https://makecode.microbit.org/","categories":[],"tags":[],"keywords":[]},{"title":"朝暮 认真的学会儿习","slug":"1朝暮","date":"2020-04-15T03:49:27.000Z","updated":"2020-04-15T09:15:40.185Z","comments":true,"path":"2020/04/15/1朝暮/","link":"","permalink":"/2020/04/15/1朝暮/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"控制任意一个小灯","slug":"13LED","date":"2020-04-15T03:49:27.000Z","updated":"2020-06-23T14:11:05.321Z","comments":true,"path":"2020/04/15/13LED/","link":"","permalink":"/2020/04/15/13LED/","excerpt":"","text":"添加如下代码 var c=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = ‘e95d0753-251d-470a-a062-fa1922dfa9a8’; LED_SERVICE = ‘e95dd91d-251d-470a-a062-fa1922dfa9a8’; DEVICE_INFORMATION_SERVICE = ‘0000180a-0000-1000-8000-00805f9b34fb’; TEMPERATURE_SERVICE = ‘e95d6100-251d-470a-a062-fa1922dfa9a8’; // 特性 UUIDs ACCELEROMETER_DATA = ‘e95dca4b-251d-470a-a062-fa1922dfa9a8’; LED_MATRIX_STATE = ‘e95d7b77-251d-470a-a062-fa1922dfa9a8’; MODEL_NUMBER_STRING = ‘00002a24-0000-1000-8000-00805f9b34fb’; TEM_TEMPERATURE = ‘e95d1b25-251d-470a-a062-fa1922dfa9a8’; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 { console.log(“discoverOrdisconnectDevices”); if(!connected) discoverDevices(); else { selected_device.gatt.disconnect(); } } function onDisconnected()//连接 { console.log(“onDisconnected”); resetUI(); } //function input.temperature(): number; function discoverDevices()// 搜索设备函数 { console.log(“discoverDevices”); var options = {acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 } //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; { console.log(‘&gt; Name:’ + device.name); console.log(‘&gt; Id:’ + device.id); console.log(‘&gt; Connected:’ + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); }) .catch(error =&gt; { alert(‘ERROR’ +error); console.log(‘ERROR’ +error); }); } function connect() //连接函数 { console.log(“connecting”); selected_device.gatt.connect() .then( function (server) { console.log(“Connected to” + server.device.id); console.log(“Connected “ + server.connected); selected_device.addEventListener(‘gattserverdisconnected’,onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); }, function (error) { console.log(“ERROR:could not connct-“ + error); alert(“ERROR:could not connct-“ + error); setConnectedStatus(false); } ); } function setConnectedStatus(status)//设置连接状态 { connected=status; document.getElementById(‘status_connected’).innerHTML = status; if(status==true) { document.getElementById(‘btn_scan’).innerHTML = “Disconnect”; } else { document.getElementById(‘btn_scan’).innerHTML = “Discover Devices”; } } function setDiscoveryStatus(status)//设置发现状态 { services_discovered=status; document.getElementById(‘status_discovered’).innerHTML=status; } function resetUI() //重置页面 { setConnectedStatus(false); } function discoverSvcsAndChars() //发现服务和特性 { console.log(“discoverSvcsAndChars server=” + connected_server); connected_server.getPrimaryServices() .then(services =&gt; { has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(“Got “ + service_count + “ services”); services.forEach(service =&gt; { if (service.uuid == ACCELEROMETER_SERVICE) { has_accelerometer_service = true; } if (service.uuid == LED_SERVICE) { has_led_service = true; } if (service.uuid == DEVICE_INFORMATION_SERVICE) { has_device_information_service = true; } if (service.uuid == TEMPERATURE_SERVICE) //温度 { has_temperature_service = true; } console.log(‘Getting Characteristics for service ‘ + service.uuid); service.getCharacteristics() .then(characteristics =&gt; { console.log(‘&gt; Service: ‘ + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; { characteristics_discovered++; console.log(‘&gt;&gt; Characteristic: ‘ + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; has_accelerometer_data = true; } if (characteristic.uuid == LED_MATRIX_STATE) { led_matrix_state = characteristic; has_led_matrix_state = true; } if (characteristic.uuid == MODEL_NUMBER_STRING) { model_number_string = characteristic; has_model_name_string = true; } if(characteristic.uuid == TEM_TEMPERATURE) //温度 { tem_temperature = characteristic; has_tem_temperature = true; } if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(“FINISHED DISCOVERY”); setDiscoveryStatus(true); //setDiscoveryStatus(true); } }); }); }); }); } var i=0,j=0; function randomLEDs(ct) //控制led { console.log(“randomLEDs”); // state validation if (!connected) { alert(“Error: Discover and connect to a device before using this function”); return; } if (!services_discovered) { alert(“Error: Service discovery has not yet completed”); return; } if (!has_led_service) { alert(“Error: The connected device does not contain the LED service”); return; } if (!has_led_matrix_state) { alert(“Error: The connected device does not contain the LED matrix state characteristic”); return; } var led_array=[]; if(ct==0) { led_array[0] = 1&lt;&lt;i; led_array[1] = 1&lt;&lt;i; led_array[2] = 1&lt;&lt;i; led_array[3] = 1&lt;&lt;i; led_array[4] = 1&lt;&lt;i; i++; if(i==5)i=0; } else if(ct==1) { led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; led_array[j] = 31; j++; if(j==5)j=0; } // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;/ /led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; / var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; { console.log(‘LED matrix state changed’); }) .catch(error =&gt; { console.log(‘Error: ‘ + error); alert(‘Error: ‘ + error); return; }); } function readModelNumber() // 蓝牙信息服务 { console.log(“readModelNumber”); // state validation if (!connected) { alert(“Error: Discover and connect to a device before using this function”); return; } if (!services_discovered) { alert(“Error: Service discovery has not yet completed”); return; } if (!has_device_information_service) { alert(“Error: The connected device does not contain the device information service”); return; } if (!has_model_name_string) { alert(“Error: The connected device does not contain the model name string characteristic”); return; } model_number_string.readValue() .then(value =&gt; { data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(“utf-8”).decode(data); console.log(model_number_string); document.getElementById(“model_number”).innerHTML = model_number_string; }) .catch(error =&gt; { console.log(‘Error: ‘ + error); alert(‘Error: ‘ + error); return; }); } function accelerometer() //加速度传感器 { console.log(“accelerometer”); // state validation if (!connected) { alert(“Error: Discover and connect to a device before using this function”); return; } if (!services_discovered) { alert(“Error: Service discovery has not yet completed”); return; } if (!has_accelerometer_service) { alert(“Error: The connected device does not contain the accelerometer service”); return; } if (!has_accelerometer_data) { alert(“Error: The connected device does not contain the accelerometer_data characteristic”); return; } accelerometer_data.readValue() .then(value =&gt; { buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(“X=” + X + “, Y=” + Y + “, Z+” + Z); document.getElementById(“ac_data”).innerHTML = “X=” + X + “, Y=” + Y + “,Z=” + Z; }) .catch(error =&gt; { console.log(‘Error: ‘ + error); alert(‘Error: ‘ + error); return; });​ } function led00() //第一行 { if(c[0]==0) { led[0]=led[0]|(1&lt;&lt;4); c[0]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;4)); c[0]=0; } randLED(); } function led01() { if(c[1]==0) { led[0]=led[0]|(1&lt;&lt;3); c[1]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;3)); c[1]=0; } randLED(); } function led02() { if(c[2]==0) { led[0]=led[0]|(1&lt;&lt;2); c[2]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;2)); c[2]=0; } randLED(); } function led03() { if(c[3]==0) { led[0]=led[0]|(1&lt;&lt;1); c[3]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;1)); c[3]=0; } randLED(); } function led04() { if(c[4]==0) { led[0]=led[0]|(1&lt;&lt;0); c[4]=1; } else{ led[0]=led[0]&amp;(~(1&lt;&lt;0)); c[4]=0; } randLED(); } function led10() //第二行 { if(c[5]==0) { led[1]=led[1]|(1&lt;&lt;4); c[5]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;4)); c[5]=0; } randLED(); } function led11() { if(c[6]==0) { led[1]=led[1]|(1&lt;&lt;3); c[6]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;3)); c[6]=0; } randLED(); } function led12() { if(c[7]==0) { led[1]=led[1]|(1&lt;&lt;2); c[7]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;2)); c[7]=0; } randLED(); } function led13() { if(c[8]==0) { led[1]=led[1]|(1&lt;&lt;1); c[8]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;1)); c[8]=0; } randLED(); } function led14() { if(c[9]==0) { led[1]=led[1]|(1&lt;&lt;0); c[9]=1; } else{ led[1]=led[1]&amp;(~(1&lt;&lt;0)); c[9]=0; } randLED(); } function led20() //第三行 { if(c[10]==0) { led[2]=led[2]|(1&lt;&lt;4); c[10]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;4)); c[10]=0; } randLED(); } function led21() { if(c[11]==0) { led[2]=led[2]|(1&lt;&lt;3); c[11]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;3)); c[11]=0; } randLED(); } function led22() { if(c[12]==0) { led[2]=led[2]|(1&lt;&lt;2); c[12]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;2)); c[12]=0; } randLED(); } function led23() { if(c[13]==0) { led[2]=led[2]|(1&lt;&lt;1); c[13]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;1)); c[13]=0; } randLED(); } function led24() { if(c[14]==0) { led[2]=led[2]|(1&lt;&lt;0); c[14]=1; } else{ led[2]=led[2]&amp;(~(1&lt;&lt;0)); c[14]=0; } randLED(); } function led30() //第四行 { if(c[15]==0) { led[3]=led[3]|(1&lt;&lt;4); c[15]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;4)); c[15]=0; } randLED(); } function led31() { if(c[16]==0) { led[3]=led[3]|(1&lt;&lt;3); c[16]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;3)); c[16]=0; } randLED(); } function led32() { if(c[17]==0) { led[3]=led[3]|(1&lt;&lt;2); c[17]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;2)); c[17]=0; } randLED(); } function led33() { if(c[18]==0) { led[3]=led[3]|(1&lt;&lt;1); c[18]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;1)); c[18]=0; } randLED(); } function led34() { if(c[19]==0) { led[3]=led[3]|(1&lt;&lt;0); c[19]=1; } else{ led[3]=led[3]&amp;(~(1&lt;&lt;0)); c[19]=0; } randLED(); } function led40() //第五行 { if(c[20]==0) { led[4]=led[4]|(1&lt;&lt;4); c[20]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;4)); c[20]=0; } randLED(); } function led41() { if(c[21]==0) { led[4]=led[4]|(1&lt;&lt;3); c[21]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;3)); c[21]=0; } randLED(); } function led42() { if(c[22]==0) { led[4]=led[4]|(1&lt;&lt;2); c[22]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;2)); c[22]=0; } randLED(); } function led43() { if(c[23]==0) { led[4]=led[4]|(1&lt;&lt;1); c[23]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;1)); c[23]=0; } randLED(); } function led44() { if(c[24]==0) { led[4]=led[4]|(1&lt;&lt;0); c[24]=1; } else{ led[4]=led[4]&amp;(~(1&lt;&lt;0)); c[24]=0; } randLED(); } Status Connected Service Discovery Completed false false Device Discovery or Disconnect Start scan Reading and Writing Write Characteristic - Randomise Lights 控制led行 控制led列 Read Characteristic - Model number Read Model number accelerometer_data Read accelerometer_data 控制单个小灯亮暗 第一行第一列 第一行第二列 第一行第三列 第一行第四列 第一行第五列 第二行第一列 第二行第二列 第二行第三列 第二行第四列 第二行第五列 第三行第一列 第三行第二列 第三行第三列 第三行第四列 第三行第五列 第四行第一列 第四行第二列 第四行第三列 第四行第四列 第四行第五列 第五行第一列 第五行第二列 第五行第三列 第五行第四列 第五行第五列 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false}); 效果图如下","categories":[],"tags":[],"keywords":[]},{"title":"连接BBC","slug":"7BBC蓝牙连接","date":"2020-04-10T03:49:27.000Z","updated":"2020-06-17T01:13:21.798Z","comments":true,"path":"2020/04/10/7BBC蓝牙连接/","link":"","permalink":"/2020/04/10/7BBC蓝牙连接/","excerpt":"","text":"一、预备环境操作系统需要win10 1703以上版本 插入BBC板子，将.hex文件直接拖到BBC板子里 当再次插拔BBC板子，发现.hex文件消失了，这是正常现象。 二、网页连接BBC板输入如下代码 function discoverDevices() { console.log(&quot;discoverDevices&quot;); var options = {acceptallDevices:true} //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; { console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); }) .catch(error =&gt; { alert(&#39;ERROR&#39; +error); console.log(&#39;ERROR&#39; +error); }); } &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverDevices()&quot;&gt;Start scan&lt;/button&gt; function connect() { console.log(“connecting”); selected_device.gatt.connect() .then( function (server) { console.log(“Connected to” + server.device.id); console.log(“Connected “ + server.connected); selected_device.addEventListener(‘gattserverdisconnected’,onDisconnected); connected_server =server; setConnectedStatus(true); }, function (error) { console.log(“ERROR:could not connct-“ + error); alert(“ERROR:could not connct-“ + error); setConnectedStatus(false); } ); } 三、将代码用谷歌浏览器打开点击connect连接 在出现的蓝牙设备中选择自己的BBC板子 板子出现 C 就表示连接成功了 四、断开蓝牙设备在原有代码加上下面代码 &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; function discoverOrdisconnectDevices() { console.log(&quot;discoverOrdisconnectDevices&quot;); if(!connected) discoverDevices(); else { selected_device.gatt.disconnect(); } } connect()函数加上如下代码 function connect() { console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) { console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected &quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected);// 1 connected_server =server; setConnectedStatus(true); // 2 }, function (error) { console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); // 3 } ); } function onDisconnected() { console.log(&quot;onDisconnected&quot;); resetUI(); } setConnectedStatus()函数如下 function setConnectedStatus(status) { connected=status; document.getElementById(&#39;status_connected&#39;).innerHTML = status; if(status==true) { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Disconnect&quot;; } else { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Discover Devices&quot;; } } 在网页连接BBC板子成功后点击disconnect就可以与板子断开连接了。","categories":[],"tags":[],"keywords":[]},{"title":"发布文章","slug":"6发布文章","date":"2020-04-09T03:49:27.000Z","updated":"2020-04-15T09:14:37.661Z","comments":true,"path":"2020/04/09/6发布文章/","link":"","permalink":"/2020/04/09/6发布文章/","excerpt":"","text":"1.创建文章执行语句 hexo new “（可随意命名）” 创建好的文章在Blog文件夹下/source/_posts中 2.语法编辑安装Typora 以后就可以用这个软件编辑文章了 3.部署（所有打开CMD都是在blog目录下）hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo generate #生成hexo server #启动服务预览，非必要，可本地浏览网页hexo deploy #部署发布","categories":[],"tags":[],"keywords":[]},{"title":"本地Blog迁移至Github及常见问题","slug":"5本地上传至G","date":"2020-04-08T03:49:27.000Z","updated":"2020-04-15T09:14:25.386Z","comments":true,"path":"2020/04/08/5本地上传至G/","link":"","permalink":"/2020/04/08/5本地上传至G/","excerpt":"","text":"输入指令：hexo d这个指令将会把本地Blog文件夹里的所有文件上传至Github 如果看到有https://username.github.io出现 说明大功告成 常见问题出错之一deploy not found： git 解决方案：执行 npm install hexo-deployer-git –save 语句即可 出错之二fatal: unable to access ‘https://username:password@github.com/username/username.github.io.git/&#39;: SSL certificate problem: unable to get local issuer certificateFATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: unable to access ‘https://username:password@github.com/username/username.github.io.git/&#39;: SSL certificate problem: unable to get local issuer certificate at ChildProcess. (D:\\test\\blog2\\node_modules\\hexo-util\\lib\\spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at ChildProcess.cp.emit (D:\\test\\blog2\\node_modules\\cross-spawn\\lib\\enoent.js:40:29) at maybeClose (internal/child_process.js:920:16) 解决方案：执行语句：git config –global http.sslVerify false","categories":[],"tags":[],"keywords":[]},{"title":"Hexo与Github关联","slug":"4关联本地Github","date":"2020-04-07T03:49:27.000Z","updated":"2020-04-15T09:14:13.133Z","comments":true,"path":"2020/04/07/4关联本地Github/","link":"","permalink":"/2020/04/07/4关联本地Github/","excerpt":"","text":"1.绑定Hexo和Github打开blog文件夹中的_config.yml文件 将最后一部分改为 deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 2.关联Hexo和Github–SSH密钥鼠标右键空白位置 点击git bash 在弹出的窗口中输入如下指令 ssh-keygen -t rsa 一路回车 这样便会在你的计算机中生成SSH密钥 SSH密钥在与blog同一文件夹中的.ssh文件夹中 进入.ssh文件夹点击id_rsa.pub文件（用记事本打开即可） 复制文件中的内容 进入Github 3.安装关联工具在blog文件夹下单机右键 点击git bash 在弹出来的命令框里面输入如下指令 npm install hexo-deployer-git –save","categories":[],"tags":[],"keywords":[]},{"title":"Github搭建","slug":"3Github注册","date":"2020-04-06T03:49:27.000Z","updated":"2020-04-15T09:13:57.875Z","comments":true,"path":"2020/04/06/3Github注册/","link":"","permalink":"/2020/04/06/3Github注册/","excerpt":"","text":"1.登录Github官网2.注册Github账号点击左上角Sing up 填写欲建的用户名、电子邮箱、密码 这里选择Free 在注册时填的电子邮箱里确认Github发来的电子邮件 3.新建仓库仓库名填写username.github.io其中username是你注册Github使用的用户名。 点击Creat repository","categories":[],"tags":[],"keywords":[]},{"title":"Hexo本地搭建","slug":"2本地搭建","date":"2020-04-05T03:49:27.000Z","updated":"2020-04-15T09:13:36.021Z","comments":true,"path":"2020/04/05/2本地搭建/","link":"","permalink":"/2020/04/05/2本地搭建/","excerpt":"","text":"1.准备工作 安装 Node.js (到官网安装适合自己系统的版本即可) 安装Git (到官网安装适合自己系统的版本即可) 2.安装Hexo在CMD窗口使用下面的命令 npm install hexo-cli -g 3.搭建本地博客Hexo根目录创建在cmd输入如下指令 md blog 初始化Hexo博客在cmd输入如下指令（首先cmd需进入blog文件夹，进入指令：cd blog) hexo init 4.本地预览在cmd输入如下指令 hexo s","categories":[],"tags":[],"keywords":[]}]}